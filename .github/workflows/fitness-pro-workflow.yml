name: Execução dos Testes, Build do APK e Criação de Release

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:  # Permite executar manualmente

jobs:
  run-tests:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.tests-outcome.outputs.success }}  # Sinaliza se os testes passaram
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Grant Permissions to gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Run Unit Tests
        id: tests-outcome
        run: ./gradlew testReleaseUnitTest
        continue-on-error: false  # Falha se os testes falharem

  build-apk:
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Apenas manual
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Grant Permissions to gradlew
        run: chmod +x gradlew

      - name: Build APK
        run: ./gradlew assembleDebug

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: apk-debug
          path: app/build/outputs/apk/debug/app-debug.apk
