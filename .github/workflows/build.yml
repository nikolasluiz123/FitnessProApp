name: Android Build & Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-debug:
    name: Build Debug APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Fix Gradle Wrapper Permissions
        run: chmod +x ./gradlew

      - name: Create Google Services File
        env:
          GOOGLE_SERVICES_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo "$GOOGLE_SERVICES_BASE64" | base64 -d > app/google-services.json

      - name: Create Local Properties File
        env:
          LOCAL_PROPERTIES_BASE64: ${{ secrets.LOCAL_PROPERTIES_BASE64 }}
        run: |
          echo "$LOCAL_PROPERTIES_BASE64" | base64 -d > local.properties

      - name: Extract Version Name
        id: version
        run: |
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | head -n1 | sed -E 's/.*versionName\s*=\s*\"([^\"]+)\".*/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Configure Gradle for GitHub Packages
        run: |
          mkdir -p ~/.gradle
          echo "gpr.user=${{ github.actor }}" >> ~/.gradle/gradle.properties
          echo "gpr.key=${{ secrets.PACKAGES_TOKEN }}" >> ~/.gradle/gradle.properties

      - name: Build Debug APK
        run: ./gradlew assembleDebug

      - name: Upload Debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apks
          path: $(find . -name '*debug*.apk' | head -n1)

  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Fix Gradle Wrapper Permissions
        run: chmod +x ./gradlew

      - name: Decode Keystore
        if: env.KEYSTORE_BASE64 != ''
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks

      - name: Create Google Services File
        env:
          GOOGLE_SERVICES_BASE64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo "$GOOGLE_SERVICES_BASE64" | base64 -d > app/google-services.json

      - name: Create Local Properties File
        env:
          LOCAL_PROPERTIES_BASE64: ${{ secrets.LOCAL_PROPERTIES_BASE64 }}
        run: |
          echo "$LOCAL_PROPERTIES_BASE64" | base64 -d > local.properties

      - name: Extract Version Name
        id: version
        run: |
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | head -n1 | sed -E 's/.*versionName\s*=\s*\"([^\"]+)\".*/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Configure Gradle for GitHub Packages
        run: |
          mkdir -p ~/.gradle
          echo "gpr.user=${{ github.actor }}" >> ~/.gradle/gradle.properties
          echo "gpr.key=${{ secrets.PACKAGES_TOKEN }}" >> ~/.gradle/gradle.properties

      - name: Build Release APK
        env:
          KEYSTORE_PATH: keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
          -Pandroid.injected.signing.store.file=$KEYSTORE_PATH \
          -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
          -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
          -Pandroid.injected.signing.key.password=$KEY_PASSWORD

      - name: Upload Release APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: $(find . -name '*release*.apk' | head -n1)

  release:
    name: Create Tag and GitHub Release
    needs: [ build-debug, build-release ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Download built APKs
        uses: actions/download-artifact@v4

      - name: Extract Version Name
        id: version
        run: |
          VERSION_NAME=$(grep "versionName" app/build.gradle.kts | head -n1 | sed -E 's/.*versionName\s*=\s*\"([^\"]+)\".*/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Create tag from versionName
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git fetch --tags
          git tag "v${{ steps.version.outputs.version_name }}"
          git push origin "v${{ steps.version.outputs.version_name }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version_name }}
          name: v${{ steps.version.outputs.version_name }}
          files: |
            **/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}